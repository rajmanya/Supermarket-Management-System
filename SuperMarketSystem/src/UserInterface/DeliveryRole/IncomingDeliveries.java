/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DeliveryRole;

import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.CustomerOrganization;
import Business.Organization.DeliveryOrganization;
import Business.Organization.Organization;
import Business.Organization.StoreManagerOrganization;
import Business.SuperMarket;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CustomerWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class IncomingDeliveries extends javax.swing.JPanel {

    /**
     * Creates new form IncomingDeliveries
     */
    private JPanel rightJPanel;
    private DeliveryOrganization deliveryOrganization;
    private Customer customer;
    private Enterprise enterprise;
    private CustomerDirectory custDir;
    private UserAccount userAccount;
    //public int orderID=1000;
    String deliveryMan;
    String custName;
    int custOrderID;
    String custEmail;
    public IncomingDeliveries(JPanel rightJPanel,UserAccount userAccount, DeliveryOrganization delOrganization,Enterprise enterprise) {
        initComponents();
        
        this.rightJPanel = rightJPanel;
        this.deliveryOrganization = delOrganization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        
        //custDir= new CustomerDirectory();
        
        System.out.println("Inside IncomingDeliveries");
        populateTable();
        populateEmployeeComboBox();
    }

    public void populateTable()
    {
        //orderID++;
        DefaultTableModel model = (DefaultTableModel) deliveryInfoJTable.getModel();
        model.setRowCount(0);
        System.out.println("Inside populateTable of IncomingDeliveries");
        System.out.println("deliveryOrganization.getWorkQueue().getWorkRequestList(): "+deliveryOrganization.getWorkQueue().getWorkRequestList());
        for(WorkRequest request : deliveryOrganization.getWorkQueue().getWorkRequestList()){
            System.out.println("Inside for of deliveryOrganization.getWorkQueue().getWorkRequestList()");
            Object[] row = new Object[4];
            row[0] = request;
            //System.out.println("row[0]: "+row[0]);
            /*row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();*/
            row[1]=request.getCustomerName();
            row[2]=request.getCustomerAddress();
            row[3]=request.getCustomerOrerID();
            
            
            model.addRow(row);
            
        }
        deliveryInfoJTable.removeColumn(deliveryInfoJTable.getColumnModel().getColumn(0));
    
    }
    
    public void populateEmployeeComboBox(){
        deliveryManComboBox.removeAllItems();
        String deliveryEmp;
        String convert;
        deliveryEmp="Delivery Man";
        int a=100;
        
        for (int i=0;i<10;i++)
        {
            a++;
            convert=String.valueOf(a);
            deliveryEmp=deliveryEmp.concat(convert);
            deliveryManComboBox.addItem(deliveryEmp);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        deliveryInfoJTable = new javax.swing.JTable();
        assignBtn = new javax.swing.JButton();
        deliveryManComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        shippedBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(232, 104, 80));

        deliveryInfoJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "", "Customer Name", "Address", "OrderId"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(deliveryInfoJTable);

        assignBtn.setText("Assign");
        assignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignBtnActionPerformed(evt);
            }
        });

        deliveryManComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Employee");

        shippedBtn.setText("Shipped");
        shippedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shippedBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(139, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deliveryManComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(shippedBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(assignBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(157, 157, 157))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deliveryManComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assignBtn)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addComponent(shippedBtn)
                .addContainerGap(66, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignBtnActionPerformed
        int selectedRow = deliveryInfoJTable.getSelectedRow();
        
        System.out.println("Selected Row :"+selectedRow);
        if (selectedRow < 0){
            return;
        }
        else{
            CustomerWorkRequest custRequest = (CustomerWorkRequest) deliveryInfoJTable.getValueAt(selectedRow, 0);
            
            custName=custRequest.getCustomerName();
            custOrderID=custRequest.getCustomerOrerID();
            
            for(Customer customer:deliveryOrganization.getCustDir().getCustomerList() ){
                if(custName.equals(customer.getCustomerName())){
                    System.out.println("customer.getCustomerName(): "+customer.getCustomerName());
                    custEmail = customer.getEmailId();
                    System.out.println("customer email: "+custEmail);
                    System.out.println("customer email 2: "+customer.getEmailId());
                }
            }
            deliveryMan= (String)deliveryManComboBox.getSelectedItem();
            
            custRequest.setStatus("Assigned");
            JOptionPane.showMessageDialog(null,"Assigned to the Delivery Person");
        }        
    }//GEN-LAST:event_assignBtnActionPerformed

    private void shippedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shippedBtnActionPerformed
        DeliveryStatusJPanel dsjp= new DeliveryStatusJPanel(rightJPanel,deliveryMan,custName,custOrderID);
        rightJPanel.add("DeliveryStatusJPanel",dsjp);
        CardLayout layout= (CardLayout)rightJPanel.getLayout();
        layout.next(rightJPanel);
        
        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.socketFactory.port", "465");
        props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
        props.put("mail.smtp.auth", "true");
         props.put("mail.smtp.port", "465");
        
         Session session = Session.getDefaultInstance(props,
                 new javax.mail.Authenticator(){
                 protected PasswordAuthentication getPasswordAuthentication(){
                     return new PasswordAuthentication("buyeazee@gmail.com","buyeazee@123");
                 }    
                 }
                         
                 );
         try{
             Message message = new MimeMessage(session);
             message.setFrom(new InternetAddress("buyeazee@gmail.com"));
             message.setRecipients(Message.RecipientType.TO, InternetAddress.parse("aman91nigs@gmail.com"));
             message.setSubject("Order Confirmation");
             message.setText("Hello Aman"+",\nYour order with orderId 1002"+"\n Has been shipped to the given address"+"\nRegards,"+"\nBuy Eazee.");
             Transport.send(message);
         }
          catch(Exception e){
             JOptionPane.showMessageDialog(null, e);
         }
        
    }//GEN-LAST:event_shippedBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignBtn;
    private javax.swing.JTable deliveryInfoJTable;
    private javax.swing.JComboBox deliveryManComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton shippedBtn;
    // End of variables declaration//GEN-END:variables
}
